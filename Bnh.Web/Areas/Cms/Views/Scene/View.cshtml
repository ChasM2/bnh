@model SceneViewModel
@{
    this.GetStyleBundle().Include(new[]
    {
        ContentUrl.Styles.Scene
    });
}

<div id="scene">
    @foreach (var wall in Model.Walls ?? Enumerable.Empty<WallViewModel>())
    {
        <div class='wall-wrapper' style='width:@wall.WidthString'>
        @foreach (var brick in wall.Bricks ?? Enumerable.Empty<IBrickViewModel<BrickContent>>())
        {
            <div id="@brick.Content.GetHtmlId()" class='brick-wrapper tabname_@brick.Content.OwnerTabName tabindex_@brick.Content.OwnerTabIndex' style='width:@brick.WidthString;display:@((!brick.Content.OwnerTabIndex.HasValue || brick.Content.OwnerTabIndex == 0) ? "block" : "none")'>
                @Html.Partial(ContentUrl.Views.BrickContent.View, brick)
            </div>
        }
        </div>
    }
</div>

@{
    this.RenderStylesAndScripts();
}