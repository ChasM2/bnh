@model Community

@{
    ViewBag.Title = Model.Name + " community";
    ViewBag.Banner = Model.Logo;
    var propertiesToSkip = new List<string> { "Name", "Zone" };
    var externalProperties = ExternalProperty.Get(typeof(Community)).Where(p => !propertiesToSkip.Contains(p.Property.Name));
    var zones = ViewBag.CityZones as IEnumerable<SelectListItem>;
}

@section Scripts {
    <script>require(["community-edit"])</script>
}

<style>
    #Logo_Url { width: 100%; }
</style>

<article class="row">

    <div class="span6">
        <h4>
            @Html.ActionLink("edit scene", "EditScene", new { id = Model.UrlId })
        </h4>

        @using (Html.BeginForm("Edit", "Community", FormMethod.Post, new { @class = "form-horizontal" }))
        {
            @Html.ValidationSummary(true)

            <fieldset>
                <legend>Main Properties</legend>

                @Html.HiddenFor(model => model.CommunityId)
                @Html.HiddenFor(model => model.CityId)
                @Html.HiddenFor(model => model.GpsLocation)
                @Html.HiddenFor(model => model.GpsBounds)

                <div class="control-group">
                    @Html.LabelFor(model => model.Name, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Name)
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.UrlId, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.UrlId)
                        @Html.ValidationMessageFor(model => model.UrlId)
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.Zone, "Zone", new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownList("Zone", zones)
                        @Html.ValidationMessageFor(model => model.Zone)
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.ShortDescription, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextAreaFor(model => Model.ShortDescription)
                        @Html.ValidationMessageFor(model => model.Zone)
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.Logo, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => Model.Logo)
                        @Html.ValidationMessageFor(model => model.Logo)
                    </div>
                </div>

                <div class="control-group">
                    <span class="control-label">Location and Bounds</span>
                    <div class="controls" id="mapContainer">
                        <div id="mapCanvas" style="width: 600px; height: 600px;"></div>
                    </div>
                </div>
            </fieldset>
            
            <fieldset>
                <legend>Filterable Properties</legend>

                @foreach (var property in externalProperties)
                {
                    if (property.TypeName == "Boolean")
                    {
                <div class="control-group">
                    @Html.Label(property.Title.ToString(), new { @class = "control-label" })
                    <div class="controls">
                        @Html.Editor(property.Property.Name)
                        
                    </div>
                </div>
                    }
                    else
                    {
                <div class="control-group">
                    @Html.Label(property.Title.ToString(), new { @class = "control-label" })
                    <div class="controls">
                        @Html.Editor(property.Property.Name)
                        @Html.ValidationMessage(property.Property.Name)
                    </div>
                </div>
                    }
                }
            </fieldset>

            <div class="form-actions">
                <div style="clear: both;">
                    <input type="submit" value="Save" class="btn btn-primary" />
                    @Html.ActionInputLink("View", "Details", attributes: new { id = Model.UrlId, @class="btn" })
                </div>
            </div>
        }
    </div>

</article>